use Master;
go
If Exists(Select Name from SysDatabases Where Name = 'MyLabsDB_YourNameHere')
 Begin 
  Alter Database [MyLabsDB_YourNameHere] set Single_user With Rollback Immediate;
  Drop Database MyLabsDB_YourNameHere;
 End
go
Create Database MyLabsDB_YourNameHere;
go


Use MyLabsDB_YourNameHere;
go

Create -- Drop 
Table Customers
 (CustomerID int Primary Key identity
 ,CustomerFirstName nvarchar(100)
 ,CustomerLastName nvarchar(100)
 ,CustomerEmail nvarchar(100)
);
go

Create -- Drop
Table CustomersChangeTracker
 (CustomerChangeTrackerID int Primary Key identity
 ,CustomerChangeTrackerDateTime datetime Default(GetDate())
 ,CustomerID int 
 ,CustomerFirstName nvarchar(100)
 ,CustomerLastName nvarchar(100)
 ,CustomerEmail nvarchar(100)
 ,TransactionType char(1) Check (TransactionType in ('i','u','d'))
);
go

Create -- Drop
Procedure pInsCustomersChangeTracker (
  @CustomerID int
 ,@CustomerFirstName nvarchar(100)
 ,@CustomerLastName nvarchar(100)
 ,@CustomerEmail nvarchar(100)
 ,@TransactionType char(1)
 )
AS
 Begin -- Skipping header,try-catch, and transaction code for demo
     Insert Into CustomersChangeTracker 
      (CustomerID, CustomerFirstName, CustomerLastName, CustomerEmail, TransactionType)
      Values(@CustomerID, @CustomerFirstName, @CustomerLastName, @CustomerEmail, @TransactionType);
 End
go


Create -- Drop
Procedure pInsCustomers (
  @CustomerFirstName nvarchar(100)
 ,@CustomerLastName nvarchar(100)
 ,@CustomerEmail nvarchar(100)
 )
AS
 Begin -- Skipping header,try-catch,and transaction code for demo
     -- Step 1: Update the current data   
     Insert Into Customers(CustomerFirstName, CustomerLastName, CustomerEmail)
      Values(@CustomerFirstName, @CustomerLastName, @CustomerEmail);
   
     -- Step 2: Copy the Inserted data
     Exec pInsCustomersChangeTracker
      @@IDENTITY, @CustomerFirstName, @CustomerLastName, @CustomerEmail, 'i';
 End
go
 
Create -- Drop
Procedure pUpdCustomers (
  @CustomerID int
 ,@CustomerFirstName nvarchar(100)
 ,@CustomerLastName nvarchar(100)
 ,@CustomerEmail nvarchar(100)
 )
AS
 Begin -- Skipping header,try-catch, and transaction code for demo
     -- Step 1: Update the current data   
     Update Customers 
     Set CustomerFirstName = @CustomerFirstName
	      ,CustomerLastName = @CustomerLastName
	      ,CustomerEmail = @CustomerEmail
      Where CustomerID = @CustomerID;
     
     -- Step 2: Copy the Updated data
     Exec pInsCustomersChangeTracker
      @CustomerID, @CustomerFirstName, @CustomerLastName, @CustomerEmail, 'u';
 End
go

Create -- Drop
Procedure pDelCustomers (
  @CustomerID int
 ,@CustomerFirstName nvarchar(100)
 ,@CustomerLastName nvarchar(100)
 ,@CustomerEmail nvarchar(100)
)
AS
 Begin -- Skipping header,try-catch, and transaction code for demo
     -- Step 1: Copy the changed data
     Exec pInsCustomersChangeTracker
      @CustomerID, @CustomerFirstName, @CustomerLastName, @CustomerEmail, 'd';
           
     -- Step 2: Delete the current data   
     Delete From Customers 
      Where CustomerID = @CustomerID;   
 End
go

-- Testing Code --
Exec pInsCustomers
  @CustomerFirstName = 'Bob'
 ,@CustomerLastName = 'Smith'
 ,@CustomerEmail = 'BSmith@MyCo.com';
Select * From Customers;
Select * From CustomersChangeTracker;
go
-- Since am changed data in two tables I use the IDENT_CURRENT() function 
-- to get the Identity number generated by a spacific table.
Declare @ID int;
Select @ID = IDENT_CURRENT('Customers');
Exec pUpdCustomers
  @CustomerID = @ID
 ,@CustomerFirstName = 'Robert'
 ,@CustomerLastName = 'Smith'
 ,@CustomerEmail = 'BSmith@MyCo.com';
Select * From Customers;
Select * From CustomersChangeTracker;
go

Declare @ID int;
Select @ID = IDENT_CURRENT('Customers');
Exec pDelCustomers
  @CustomerID = @ID
 ,@CustomerFirstName = 'Robert'
 ,@CustomerLastName = 'Smith'
 ,@CustomerEmail = 'BSmith@MyCo.com';
Select * From Customers;
Select * From CustomersChangeTracker;
go

-- TRIGGER DEMO --

Create -- Drop
Trigger tTrackCustomers On Customers
 After Insert, Update, Delete
AS
 Begin
  Select *, 'Data in Inserted' as [Note] From Inserted;
  Select *, 'Data in Deleted' as [Note] From Deleted
  If ((Select count(*) From Inserted) = 1) And ((Select count(*) From Deleted) = 0)
   Select 'Trigger: It was an Insert';
  If ((Select count(*) From Inserted) = 1) And ((Select count(*) From Deleted) = 1)
   Select 'Trigger: It was an Update';
  If ((Select count(*) From Inserted) = 0) And ((Select count(*) From Deleted) = 1)
   Select 'Trigger: It was an Delete';
 End
go


-- Test the Trigger!
Truncate Table Customers; -- Does not "Fire" the trigger!
go

Insert into Customers (CustomerFirstName, CustomerLastName, CustomerEmail)
 Values ('a','b','ab@TestCo.com');
go

Declare @ID int;
Select @ID = IDENT_CURRENT('Customers');
Update Customers Set CustomerFirstName = 'AA' Where CustomerID = @ID; 
go

Declare @ID int;
Select @ID = IDENT_CURRENT('Customers');
Delete From Customers Where CustomerID = @ID;
go


-- Configure the trigger to use the tracking table
Alter
Trigger tTrackCustomers On Customers
 After Insert, Update, Delete
AS
 Begin
  Declare
  @CustomerID int
 ,@CustomerFirstName nvarchar(100)
 ,@CustomerLastName nvarchar(100)
 ,@CustomerEmail nvarchar(100)

  If (((Select count(*) From Inserted) = 1) And ((Select count(*) From Deleted) = 0))
   BEGIN -- IF
     Select   
       @CustomerID = CustomerID
      ,@CustomerFirstName = CustomerFirstName
      ,@CustomerLastName = CustomerLastName
      ,@CustomerEmail = CustomerEmail
     From Inserted 
     Exec pInsCustomersChangeTracker
      @CustomerID, @CustomerFirstName, @CustomerLastName, @CustomerEmail, 'i';
    END -- IF

  If (((Select count(*) From Inserted) = 1) And ((Select count(*) From Deleted) = 1))
   BEGIN -- IF
     Select   
       @CustomerID = CustomerID
      ,@CustomerFirstName = CustomerFirstName
      ,@CustomerLastName = CustomerLastName
      ,@CustomerEmail = CustomerEmail
     From Inserted 
     Exec pInsCustomersChangeTracker
      @CustomerID, @CustomerFirstName, @CustomerLastName, @CustomerEmail, 'u';
    END -- IF


  If (((Select count(*) From Inserted) = 0) And ((Select count(*) From Deleted) = 1))
   BEGIN -- IF
     Select   
       @CustomerID = CustomerID
      ,@CustomerFirstName = CustomerFirstName
      ,@CustomerLastName = CustomerLastName
      ,@CustomerEmail = CustomerEmail
     From Deleted 
     Exec pInsCustomersChangeTracker
      @CustomerID, @CustomerFirstName, @CustomerLastName, @CustomerEmail, 'd';
    END -- IF
 End
go

-- Test the new trigger configuration
Truncate Table Customers; -- Does not "Fire" the trigger!
Truncate Table CustomersChangeTracker; -- Does not "Fire" the trigger!
go

Insert into Customers (CustomerFirstName, CustomerLastName, CustomerEmail)
 Values ('a','b','ab@TestCo.com');
Select * From CustomersChangeTracker;
go

Declare @ID int;
Select @ID = IDENT_CURRENT('Customers');
Update Customers Set CustomerFirstName = 'AA' Where CustomerID = @ID; 
Select * From CustomersChangeTracker;
go

Declare @ID int;
Select @ID = IDENT_CURRENT('Customers');
Delete From Customers Where CustomerID = @ID;
Select * From CustomersChangeTracker;